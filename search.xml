<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[项目笔记-如何从A页面跳转到B页面指定的slide]]></title>
    <url>%2F%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0-%E5%A6%82%E4%BD%95%E4%BB%8EA%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC%E5%88%B0B%E9%A1%B5%E9%9D%A2%E6%8C%87%E5%AE%9A%E7%9A%84slide.html</url>
    <content type="text"><![CDATA[欢迎使用马克飞象昨天下班，北京竟下起了雪。这就是传说中的“雪债雪偿”吗？ 闲话不多说，最近在项目中遇到一个需求，B页面是一个14个slide组成的轮播样式，A页面中有14个超链接分别指向B页面对应的slide，点击超链接会跳转到对应的slide。 刚看到这个需求时，没有什么头绪，因为B页面加载进来后必然会是第一个slide。 通过翻看swiper的API，看到了slideTo（）方法,语法如下： mySwiper.slideTo(index, speed, runCallbacks)Swiper切换到指定slide。index:必选，num，指定将要切换到的slide的索引。speed:可选，num(单位ms)，切换速度。runCallbacks:可选，boolean，设置为false时不会触发onSlideChange回调函数。 既然这样，自然想到可以给每个超链接带个索引，跳转过来时获取到索引，然后迅速滑到对应的slide。 A页面HTML部分12345678910111213141516171819202122232425262728&lt;p class="line1"&gt; &lt;a href="#" data-count='0'&gt;首页&lt;/a&gt; &lt;a href="#" data-count='1'&gt;个人中心&lt;/a&gt;&lt;/p&gt;&lt;p class="line2"&gt; &lt;a href="#" data-count='2'&gt;我的课表&lt;/a&gt; &lt;a href="#" data-count='3'&gt;账户余额&lt;/a&gt;&lt;/p&gt;&lt;p class="line3"&gt; &lt;a href="#" data-count='4'&gt;我的课程&lt;/a&gt; &lt;a href="#" data-count='5'&gt;我的发票&lt;/a&gt;&lt;/p&gt;&lt;p class="line4"&gt; &lt;a href="#" data-count='6'&gt;活动报名&lt;/a&gt; &lt;a href="#" data-count='7'&gt;推荐好友&lt;/a&gt;&lt;/p&gt;&lt;p class="line5"&gt; &lt;a href="#" data-count='8'&gt;课后作业&lt;/a&gt; &lt;a href="#" data-count='9'&gt;校区评价&lt;/a&gt;&lt;/p&gt;&lt;p class="line6"&gt; &lt;a href="#" data-count='10'&gt;错题本&lt;/a&gt; &lt;a href="#" data-count='11'&gt;高豆兑换&lt;/a&gt;&lt;/p&gt;&lt;p class="line7"&gt; &lt;a href="#" data-count='12'&gt;消息通知&lt;/a&gt; &lt;a href="#" data-count='13'&gt;每日任务&lt;/a&gt;&lt;/p&gt; A页面JS部分12345$a = $('a');$a.on('click',function()&#123;let index = $(this).attr('data-count');window.location.href = "./userManualsDetail.html?" + "num=" + encodeURI(index);&#125;) B页面JS部分1234567let loc = window.location.href;let n1 = loc.length;//地址的总长度let n2 = loc.indexOf('=');//取得=号的位置let num = decodeURI(loc.substr(n2 + 1, n1 - n2));//=号后面的内容if (n2&gt;0) &#123; mySwiper.slideTo(num,0);&#125; 详细代码可参考我的GitHub（移动端观看）。 今天就总结到这，明天要去驾校练车，早点休息~~]]></content>
      <categories>
        <category>总结</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[JS乘性操作符小总结]]></title>
    <url>%2FJS%E4%B9%98%E6%80%A7%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%B0%8F%E6%80%BB%E7%BB%93.html</url>
    <content type="text"><![CDATA[今天有小伙伴问我JS乘法中Infinity的用法，发现自己不太了解，想到当时的尴尬气氛，也为了以后方便查询，遂下定决心总结一番。 从头开始吧，ECMAScript共定义了三个乘性操作符：乘法、除法和求模。这些操作符与C、Java或者Perl中的相应操作符用途类型，只不过在操作数为非数值的情况下会执行自动的类型转换。如果参与乘法运算的某个操作数不是数值，后台会先使用Number()转型函数将其转换为数值。也就是说，空字符串将被当做0，布尔值true将被当做1。 一、乘法在处理特殊值的情况下，乘法操作符遵循下列特殊的规则： 如果操作数都是数值，执行常规的乘法运算，即两个正数或两个负数相乘的结果还是正数，而如果只有一个操作数有负号，那么结果就是负数。如果乘积超过了ECMAScript数值的表示范围，则返回Infinity或-Infinity； 由于内存的限制，ECMAScript并不能保存世界上所有的数值。ECMAScript能够表示的最小数值保存在 Number.MIN_VALUE中，在大多数浏览器中，这个值是5e-324;能够表示的最大数值保存在Number.MAX_VALUE中，在大多数浏览器中，这个值是1.7976931348623157e+308。 如果有一个操作数是NaN，则结果是NaN； 1console.log(8*NaN) //NaN 如果是Infinity与0相乘，则结果是NaN； 1console.log(Infinity*0) //NaN 如果是Infinity与非零数值相乘，则结果是Infinity或-Infinity，取决于操作数的符号； 12console.log(Infinity*3) //Infinityconsole.log(Infinity*-3) //-Infinity 如果是Infinity与Infinity相乘，则结果是Infinity； 1console.log(Infinity*Infinity) //Infinity 如果有一个操作数不是数值，则在后台调用Number()将其转换为数值，然后再应用上面的规则。 二、除法与乘法操作符类似，除法操作符对特殊的值也有特殊的处理规则。 如果操作数都是数值，执行常规的除法运算，即两个正数或两个负数相除的结果还是正数，而如果只有一个操作数有负号，那么结果就是负数。如果超过了ECMAScript数值的表示范围，则返回Infinity或-Infinity； 如果有一个操作数是NaN，则结果是NaN； 1console.log(NaN/4) //NaN 如果是Infinity被Infinity除，则结果是NaN； 1console.log(Infinity/Infinity) //NaN 如果是零被零除，则结果是NaN; 1console.log(0/0) //NaN 如果是非零的有限数被零除，则结果是Infinity或-Infinity，取决于操作数的符号； 12console.log(2/0) //Infinityconsole.log(-3/0) //-Infinity 如果是Infinity被任何非零数值除，则结果是Infinity或-Infinity，取决于操作数符号； 12console.log(Infinity/3) //Infinityconsole.log(Infinity/-5) //-Infinity 如果有一个操作数不是数值，则在后台调用Number()将其转换为数值，然后再应用上面的规则。 三、求模与另外两个乘性操作符类似，求模操作符会遵循下列特殊规则处理特殊的值。 如果操作数都是数值，执行常规的除法运算，返回除得的余数； 如果被除数是无穷大值而除数是有限大的数值，则结果是NaN； 1console.log(Infinity%8) //NaN 如果被除数是有限大的数值而除数是零，则结果是NaN； 1console.log(7%0) //NaN 如果是Infinity被Infinity除，则结果是NaN； 1console.log(Infinity%Infinity) //NaN 如果被除数是有限大的数值而除数是无穷大的数值，则结果是被除数； 1console.log(6%Infinity) //6 如果被除数是零，则结果是零； 1console.log(0%Infinity) //0 如果有一个操作数不是数值，则在后台调用Number()将其转换为数值，然后再应用上面的规则。 今天就先总结到这里吧，如果错误，欢迎指正。]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>JS操作符</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue学习填坑记之Vue.js devtools安装后无法启用]]></title>
    <url>%2Fvue%E5%AD%A6%E4%B9%A0%E5%A1%AB%E5%9D%91%E8%AE%B0%E4%B9%8BVue-js-devtools%E5%AE%89%E8%A3%85%E5%90%8E%E6%97%A0%E6%B3%95%E5%90%AF%E7%94%A8.html</url>
    <content type="text"><![CDATA[学习一门技术的时候，总会掉进各种各样的坑里。说实话，往外爬的过程是很考验人的耐力的。此时，如果有人打扰你，你应该告诉TA,社会主义救了你… 貌似跑题了，各位看官不要介意，本人思维太跳跃，下面步入正题。 今天在调试vue代码时，发现Chrome浏览器右上角的V图标竟然悄悄变灰了，作为一个Front End Engineer,怎么能容忍这种事情发生呢？ 为了日后方便查阅，特把本人的解决方法总结如下。 修改插件manifest文件找到Vue.js devtools的安装目录，可以在电脑中搜索插件的ID：nhdogjmejiglipccpnnnanhbledajbpd。我是win10系统，默认安装在C:\Users\Administrator\AppData\Local\Google\Chrome\User Data\Default\Extensions\nhdogjmejiglipccpnnnanhbledajbpd处。 点进去找到manifest.json文件并打开，persistent修改为true。 上述修改后没有反应？机智的我继续往外爬。 插件使用环境通过查阅文档，发现有以下两种情况。 第一，页面使用的vue如果是生产环境，即压缩版本的话，devtools的选项是默认关闭的，所以可以使用非压缩版的。 第二，页面若是使用file://形式打开的话，需要到chrome扩展程序处勾上“允许访问文件网址”。或者使用服务器查看。 经过一番折腾，V终于又亮了，哈哈，不错吧。]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue插件</tag>
      </tags>
  </entry>
</search>
